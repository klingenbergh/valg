{"version":3,"sources":["../src/index.ts","../src/routes/public.ts","../src/core/cache.ts","../src/core/blocking.ts","../../config/blockmap.json"],"sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\n\nimport publicRoutes from './routes/public.js';\n\nconst app = express();\napp.use(helmet());\napp.use(express.json({ limit: '1mb' }));\napp.use(morgan('dev'));\n\napp.use('/api', publicRoutes);\n\nconst port = Number(process.env.PORT || 3000);\napp.listen(port, () => {\n  // eslint-disable-next-line no-console\n  console.log(`Server listening on http://localhost:${port}`);\n});\n","import { Router } from 'express';\nimport { getCache } from '../core/cache.js';\nimport { sumBlocks } from '../core/blocking.js';\n// Bundled via tsup; JSON will be inlined by esbuild\nimport blockmap from '../../../config/blockmap.json';\n\nconst router: Router = Router();\nconst cache = getCache();\n\nrouter.get('/results', (req, res) => {\n  const year = Number(req.query.year);\n  if (!Number.isFinite(year)) return res.status(400).json({ error: 'Missing year' });\n  const rows = cache.queryResults(year);\n  const blocks = sumBlocks(\n    rows.map((r) => ({ year, partyId: r.partyId, voteSharePct: r.pct, seats: r.seats ?? undefined, meta: { source: r.source, accessedAt: '' } })),\n    (blockmap as any)[String(year)] || [],\n  );\n\n  return res.json({ year, results: rows.map((r) => ({ party: r.partyId, pct: r.pct, seats: r.seats })), blocks });\n});\n\nrouter.get('/polls', (req, res) => {\n  const year = Number(req.query.year);\n  const windowDays = req.query.windowDays ? Number(req.query.windowDays) : undefined;\n  if (!Number.isFinite(year)) return res.status(400).json({ error: 'Missing year' });\n\n  const rows = cache.queryPolls(year);\n  // TODO: aggregate window; simple passthrough for now\n  const pollsMap = new Map<string, { date: string; pollster: string | null; parties: { party: string; pct: number | null }[] }>();\n  for (const r of rows) {\n    const key = `${r.date}|${r.pollster ?? ''}`;\n    if (!pollsMap.has(key)) pollsMap.set(key, { date: r.date, pollster: r.pollster, parties: [] });\n    pollsMap.get(key)!.parties.push({ party: r.partyId, pct: r.pct });\n  }\n  const polls = Array.from(pollsMap.values()).sort((a, b) => a.date.localeCompare(b.date));\n\n  return res.json({ year, polls, aggregates: {} });\n});\n\nrouter.get('/blocks', (req, res) => {\n  const year = Number(req.query.year);\n  const type = String(req.query.type || 'results');\n  if (!Number.isFinite(year)) return res.status(400).json({ error: 'Missing year' });\n  if (type !== 'results' && type !== 'polls') return res.status(400).json({ error: 'Bad type' });\n\n  if (type === 'results') {\n    const rows = cache.queryResults(year).map((r) => ({ year, partyId: r.partyId, voteSharePct: r.pct, seats: r.seats ?? undefined, meta: { source: r.source, accessedAt: '' } }));\n    const blocks = sumBlocks(rows, (blockmap as any)[String(year)] || []);\n    return res.json({ year, blocks, mapping: (blockmap as any)[String(year)] || [] });\n  }\n  // For polls, compute last known per party average (placeholder)\n  const rows = cache.queryPolls(year);\n  const latest: Record<string, number> = {};\n  for (const r of rows) {\n    if (r.pct == null) continue;\n    latest[r.partyId] = r.pct; // naive last sample\n  }\n  const results = Object.entries(latest).map(([partyId, pct]) => ({ year, partyId, voteSharePct: pct, meta: { source: 'Wikipedia', accessedAt: '' } }));\n  const blocks = sumBlocks(results as any, (blockmap as any)[String(year)] || []);\n  return res.json({ year, blocks, mapping: (blockmap as any)[String(year)] || [] });\n});\n\nrouter.get('/coverage', (_req, res) => {\n  const years = cache.distinctYears();\n  const coverage = years.map((y) => ({\n    year: y,\n    pollsAvailable: cache.queryPolls(y).length > 0,\n    range: cache.pollDateRange(y),\n    sources: cache.pollSources(y),\n  }));\n  return res.json({ years, coverage });\n});\n\nexport default router;\n","import Database from 'better-sqlite3';\nimport NodeCache from 'node-cache';\n\nconst memoryCache = new NodeCache();\n\nexport class Cache {\n  private db: Database.Database;\n  constructor(private dbPath: string) {\n    this.db = new Database(dbPath);\n    this.bootstrap();\n  }\n\n  private bootstrap() {\n    this.db.exec(`\n      PRAGMA journal_mode = WAL;\n      CREATE TABLE IF NOT EXISTS raw_responses (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        source TEXT NOT NULL,\n        key TEXT NOT NULL,\n        fetched_at TEXT NOT NULL,\n        status INTEGER,\n        url TEXT,\n        etag TEXT,\n        last_modified TEXT,\n        body TEXT\n      );\n      CREATE UNIQUE INDEX IF NOT EXISTS idx_raw_source_key ON raw_responses(source, key);\n\n      CREATE TABLE IF NOT EXISTS normalized_results (\n        year INTEGER NOT NULL,\n        party_id TEXT NOT NULL,\n        pct REAL NOT NULL,\n        seats INTEGER,\n        source TEXT NOT NULL,\n        PRIMARY KEY (year, party_id, source)\n      );\n\n      CREATE TABLE IF NOT EXISTS normalized_polls (\n        year INTEGER NOT NULL,\n        date TEXT NOT NULL,\n        pollster TEXT,\n        party_id TEXT NOT NULL,\n        pct REAL,\n        sample INTEGER,\n        source TEXT NOT NULL,\n        PRIMARY KEY (year, date, pollster, party_id, source)\n      );\n    `);\n  }\n\n  putMemory<T>(key: string, value: T, ttlSeconds = 3600) {\n    memoryCache.set(key, value, ttlSeconds);\n  }\n\n  getMemory<T>(key: string): T | undefined {\n    return memoryCache.get<T>(key);\n  }\n\n  saveRawResponse(params: {\n    source: string;\n    key: string;\n    fetchedAt: string;\n    status?: number;\n    url?: string;\n    etag?: string;\n    lastModified?: string;\n    body?: string;\n  }) {\n    const stmt = this.db.prepare(`\n      INSERT INTO raw_responses (source, key, fetched_at, status, url, etag, last_modified, body)\n      VALUES (@source, @key, @fetchedAt, @status, @url, @etag, @lastModified, @body)\n      ON CONFLICT(source, key) DO UPDATE SET\n        fetched_at = excluded.fetched_at,\n        status = excluded.status,\n        url = excluded.url,\n        etag = excluded.etag,\n        last_modified = excluded.last_modified,\n        body = excluded.body\n    `);\n    stmt.run(params);\n  }\n\n  upsertResult(row: { year: number; partyId: string; pct: number; seats?: number | null; source: string }) {\n    const stmt = this.db.prepare(`\n      INSERT INTO normalized_results (year, party_id, pct, seats, source)\n      VALUES (@year, @partyId, @pct, @seats, @source)\n      ON CONFLICT(year, party_id, source) DO UPDATE SET\n        pct = excluded.pct,\n        seats = excluded.seats\n    `);\n    stmt.run({ ...row, seats: row.seats ?? null });\n  }\n\n  upsertPoll(row: {\n    year: number;\n    date: string;\n    pollster?: string | null;\n    partyId: string;\n    pct: number | null;\n    sample?: number | null;\n    source: string;\n  }) {\n    const stmt = this.db.prepare(`\n      INSERT INTO normalized_polls (year, date, pollster, party_id, pct, sample, source)\n      VALUES (@year, @date, @pollster, @partyId, @pct, @sample, @source)\n      ON CONFLICT(year, date, pollster, party_id, source) DO UPDATE SET\n        pct = excluded.pct,\n        sample = excluded.sample\n    `);\n    stmt.run({ ...row, pollster: row.pollster ?? null, sample: row.sample ?? null });\n  }\n\n  queryResults(year: number) {\n    return this.db\n      .prepare(`SELECT party_id as partyId, pct, seats, source FROM normalized_results WHERE year = ?`)\n      .all(year) as Array<{ partyId: string; pct: number; seats: number | null; source: string }>;\n  }\n\n  queryPolls(year: number) {\n    return this.db\n      .prepare(\n        `SELECT date, pollster, party_id as partyId, pct, sample, source FROM normalized_polls WHERE year = ? ORDER BY date ASC`,\n      )\n      .all(year) as Array<{ date: string; pollster: string | null; partyId: string; pct: number | null; sample: number | null; source: string }>;\n  }\n\n  distinctYears() {\n    const rows = this.db.prepare(`SELECT DISTINCT year FROM normalized_results UNION SELECT DISTINCT year FROM normalized_polls`).all() as Array<{ year: number }>;\n    return rows.map((r) => r.year).sort();\n  }\n\n  pollDateRange(year: number) {\n    const row = this.db.prepare(`SELECT MIN(date) as min, MAX(date) as max FROM normalized_polls WHERE year = ?`).get(year) as { min: string | null; max: string | null };\n    return row && row.min && row.max ? { from: row.min, to: row.max } : undefined;\n  }\n\n  pollSources(year: number) {\n    const rows = this.db.prepare(`SELECT DISTINCT source FROM normalized_polls WHERE year = ?`).all(year) as Array<{ source: string }>;\n    return rows.map((r) => r.source);\n  }\n}\n\nlet singleton: Cache | null = null;\nlet singletonPath = '';\nexport function getCache(dbPath = process.env.SQLITE_PATH || './data/valg.sqlite') {\n  if (!singleton || singletonPath !== dbPath) {\n    singleton = new Cache(dbPath);\n    singletonPath = dbPath;\n  }\n  return singleton;\n}\n","import { BlockDef, Result } from './models.js';\n\nexport type BlockTotals = {\n  name: string;\n  pct: number;\n  seats?: number;\n};\n\nexport function sumBlocks(results: Result[], blockDefs: BlockDef[], includeOthers = true): BlockTotals[] {\n  const totals: Record<string, number> = {};\n\n  for (const block of blockDefs) {\n    totals[block.name] = 0;\n  }\n\n  let others = 0;\n  const partyToBlock = new Map<string, string>();\n  for (const block of blockDefs) {\n    for (const pid of block.partyIds) partyToBlock.set(pid, block.name);\n  }\n\n  for (const r of results) {\n    const blockName = partyToBlock.get(r.partyId);\n    if (blockName) {\n      totals[blockName] += r.voteSharePct;\n    } else if (includeOthers) {\n      others += r.voteSharePct;\n    }\n  }\n\n  const out: BlockTotals[] = Object.entries(totals).map(([name, pct]) => ({ name, pct }));\n  if (includeOthers) out.push({ name: 'Övriga', pct: others });\n  return out.sort((a, b) => b.pct - a.pct);\n}\n","{\n  \"2009\": [\n    { \"year\": 2009, \"name\": \"Rödgrön\", \"partyIds\": [\"ap\", \"sv\", \"sp\", \"r\", \"mdg\"] },\n    { \"year\": 2009, \"name\": \"Borgerlig\", \"partyIds\": [\"h\", \"frp\", \"v\", \"krf\"] }\n  ],\n  \"2013\": [\n    { \"year\": 2013, \"name\": \"Rödgrön\", \"partyIds\": [\"ap\", \"sv\", \"sp\", \"r\", \"mdg\"] },\n    { \"year\": 2013, \"name\": \"Borgerlig\", \"partyIds\": [\"h\", \"frp\", \"v\", \"krf\"] }\n  ],\n  \"2017\": [\n    { \"year\": 2017, \"name\": \"Rödgrön\", \"partyIds\": [\"ap\", \"sv\", \"sp\", \"r\", \"mdg\"] },\n    { \"year\": 2017, \"name\": \"Borgerlig\", \"partyIds\": [\"h\", \"frp\", \"v\", \"krf\"] }\n  ],\n  \"2021\": [\n    { \"year\": 2021, \"name\": \"Rödgrön\", \"partyIds\": [\"ap\", \"sv\", \"sp\", \"r\", \"mdg\"] },\n    { \"year\": 2021, \"name\": \"Borgerlig\", \"partyIds\": [\"h\", \"frp\", \"v\", \"krf\"] }\n  ]\n}\n"],"mappings":"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","names":["rows","blocks"]}